** Design pattern d'interface **                                  

L'application se sépare dans 3 groupes de classe distinct.

 +-------+             +-------+ 
 | Utils |             | Core  | 
 +-------+             +-------+ 
 |       | <---------> |       | 
 |       |             |       | 
 +-------+             +-------+ 
                                  
     ^                     ^     
     |                     |     
     |                     |     
     |                     |     
     |      +-------+      |     
     |      |Display|      |     
     |      +-------+      |     
     +----> |       | <----+     
            |       |            
            +-------+            
                                  
Utils contient les données relatives à la partie, les réglages.
Core contient le coeur du programme, la gestion de l'échiquier, des mouvements, de l'horloge.
Tandis que Display contient tout le code relatif à l'affichage. 

Le design pattern observer est utilisé pour communiquer entre chacqune de ces groupes, nottament pour raffraichir
l'affichage quand l'échiquier subit un changement.

Cette organisastion rappelle le patron de conception Modèle Vue Controller qui propose de séparer le code en 3
partie, dont la vue (ici Display), le controller (Core) et le modèle qui contient toute les données de
l'application (utils contient une partie des données seulement, mais se rapproche d'un modèle).
La mise à jour de l'interface se fait justement par observer, (la vue <<observe>> le modèle pour surveiller
les mises à jour du modèle par le controleur.)

** Behavior **

Les pièces possèdent différents comportements. Ces comportements sont implémentés suivant le patron de conception
template. 
                 +--------+                                            
                 | Piece  |                                            
                 +--------+                                            
                 |        |                                            
                 |        |                                            
                 +----+---+                                            
                      ^                                                
                      |                                                
             +------------------+                                           
             |Behavior(abstract)|                                           
             +------------------+                                           
             |+getSquaresRange()|                                           
             |+getMoves()       |                                           
             +--------+---------+                                           
                      ^                                                
                      |                                                
     +----------------+---------------+--------------------+           
     |                |               |                    |           
-----+-------+ +------+-------+ +-----+------+ +-----------+----------+
|pawnBehavior| |knightBehavior| |kingBehavior| |longRangePieceBehavior|
+------------+ +--------------+ +------------+ +----------------------+
|+getSquares.| |+getSquaresRa.| |+getSquareR.| |+getSquaresRange()    |
|+getMoves() | |+getMoves()   | |+getMoves() | |+getMoves()           |
-------------+ +--------------+ +------------+ +--------+-------------+
                                                        ^              
                                                        |              
                                               +--------+------+       
                                               |               |       
                                        +------+-------+ +-----+------+
                                        |bishopBehavior| |rookBehavior|
                                        +--------------+ +------------+
                                        |+getSquaresRa.| |+getSquares.|
                                        |+getMoves()   | |+getMoves() |
                                        +--------------+ +------------+

Le template method permet de définir précisement le comportement pour les pièces. En effet, ces pièces
implémente un comportement (Behavior) qui est abstrait. Les classes concrètes contenant les vrais
déplacements (différents les uns des autres) étendent Behavior en héritant de cette classe.
Ainsi quand chaque pièce cherche à connaitre ses cases dans sa portée, la réponse donnée par la classe qui
lui correspond.

Ce design est aussi utilisé pour donner des particularités à certaine pièces. Le roi possède en plus des
déplacements et autres méthodes communes, des méthodes pour vérifier s'il est en lieu sûr etc...

** Singleton **

Le singleton est un patron de conception qui permet d'assurer que une seule instance d'une classe pourra être
instanciée. Ce pattern est utilisé dans ce projet par JChessApp et JChessView.
Ces deux classes ont en attribut statique une instance d'eux même. Lors de la construction de ces classes,
l'attribut est vérifié, s'il est null, la classe instanciée. On peut récupérer les instances en appelant
nimporte quand 'getApplication()'.
